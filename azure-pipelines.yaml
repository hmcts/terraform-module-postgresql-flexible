trigger:
  batch: true
  branches:
    include:
      - master

pr:
  - master

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

variables:
  - name: timeoutInMinutes
    value: 60
  - name: agentImage
    value: ubuntu-latest
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries

stages:
  - stage: InstallTerraform
    displayName: Install Terraform
    jobs:
      - job: InstallTerraformJob
        displayName: Install Terraform
        pool:
          vmImage: ${{ variables.agentImage }}
        steps:
          - task: Bash@3
            displayName: Install Terraform
            inputs:
              targetType: 'inline'
              script: |
                echo "Installing Terraform..."
                curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
                apt-get update && apt-get install -y terraform
                terraform --version

  - stage: Precheck
    dependsOn: InstallTerraform
    jobs:
      - job:
        pool: 
          vmImage: ${{ variables.agentImage }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-sp-token'
              serviceConnection: 'azurerm-sandbox'
              overrideAction: 'plan'
              forcePreventParallelJobRun: true

  - stage: Test
    dependsOn: Precheck
    jobs:
      - job: TerraformTest
        pool: 
          vmImage: ${{ variables.agentImage }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        workspace:
          clean: all
        steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'DTS-SHAREDSERVICES-TEST'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              terraform init
              terraform test